#!/bin/bash
SCRIPT_TITLE="Horst"
SCRIPT_ID="horst"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# VARIABLES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$SCRIPT_DIR/$(basename "$0")"
SCRIPT_HOME="$HOME/.config/$SCRIPT_ID"
SCRIPT_CONFIG="$SCRIPT_HOME/config"
SCRIPT_ICON="$SCRIPT_DIR/$SCRIPT_ID.svg"
DESKTOP_FILE="$HOME/.local/share/applications/$SCRIPT_ID.desktop"

# https://github.com/StevenBlack/hosts
SOURCE_FILE="$SCRIPT_HOME/sources"
WHITE_LIST_FILE="$SCRIPT_HOME/whitelist"
HOSTS_USER_FILE="$SCRIPT_HOME/hosts"
HOSTS_VERSION_FILE="$SCRIPT_HOME/version"

TIMESTAMP="$(date '+%Y-%m-%d %H:%M')"
TEMP_DIR="/tmp/$SCRIPT_ID-$TIMESTAMP"
CACHE_DIR="$HOME/.cache/$SCRIPT_ID"

# Config defaults
HOSTS_FILE='/etc/hosts'
HOSTS_BACKUP_FILE="$HOSTS_FILE.bak"
DESKTOP_ICON="true"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# WRAPPER
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

log() {
    printf '%s\n' "$(date "+%Y-%m-%d %H:%M:%S") $SCRIPT_ID | $1"
}

notify() {
    log "$1"
    notify-send --icon="$SCRIPT_ICON" "$SCRIPT_TITLE" "$1"
}

zenity() {
    /usr/bin/zenity --name="$SCRIPT_ID" --width=300 --height=300 --title='' --text='' --window-icon="$SCRIPT_ICON" "$@" 2>/dev/null
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# FUNCTIONS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main() {

    # Create dirs
    mkdir -p "$SCRIPT_HOME"

    # Check config
    check_config 'HOSTS_FILE' "$HOSTS_FILE"
    check_config 'HOSTS_BACKUP_FILE' "$HOSTS_BACKUP_FILE"
    check_config 'DESKTOP_ICON' "$DESKTOP_ICON"

    # Import script config file
    . "$SCRIPT_CONFIG"

    # Create source file
    if [ ! -f "$SOURCE_FILE" ]; then
        # https://github.com/hectorm/hblock/blob/master/hblock
        {
            echo 'https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/adaway.org/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/adguard-simplified/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/easylist/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/easylist-deu/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/easyprivacy/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/eth-phishing-detect/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/gfrogeye-firstparty-trackers/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/ublock/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/ublock-badware/list.txt'
            echo 'https://raw.githubusercontent.com/hectorm/hmirror/master/data/ublock-privacy/list.txt'
        } >>"$SOURCE_FILE"
        echo "$SOURCE_FILE created"
    fi

    # Create white list file
    if [ ! -f "$WHITE_LIST_FILE" ]; then
        touch "$WHITE_LIST_FILE"
        echo "$WHITE_LIST_FILE created"
    fi

    # Create or remove desktop icon
    if [ "$DESKTOP_ICON" = "true" ]; then
        create_desktop_file
    else
        remove_desktop_file
    fi

    # OPEN MAIN MENU
    zenity_main_menu
}

#------------------------------------------------------------

print_zenity_header() {

    # TITLE
    local txt_title='<span font_family="monospace" foreground="#494949" font="18"><b>'$SCRIPT_TITLE'</b></span>'

    # STATUS
    local icon_status='<span font_family="monospace" foreground="#BF616A" font="12">✗</span> '
    local txt_status='<span font_family="monospace" foreground="#2E3440" font="9">disabled</span>'
    if check_horst_enabled; then
        icon_status='<span font_family="monospace" foreground="#A3BE8C" font="12">✔</span> '
        txt_status='<span font_family="monospace" foreground="#2E3440" font="9">enabled</span>'
    fi

    # SOURCE
    local icon_source=''
    local txt_source=''
    if check_horst_enabled; then
        icon_source='<span font_family="monospace" foreground="#EBCB8B" font="12">★</span> '
        txt_source='<span font_family="monospace" foreground="#2E3440" font="9">'$(count_sources)' Sources</span>'
    fi

    # UPDATE
    local icon_update=''
    local txt_update=''
    if check_horst_enabled; then
        icon_update='<span font_family="monospace" foreground="#B48EAD" font="12">↺</span> '
        txt_update="$(cat "$HOSTS_VERSION_FILE")"
        txt_update='<span font_family="monospace" foreground="#2E3440" font="9">'$txt_update'</span>'
    fi

    # Print header
    echo "\n$txt_title\n\n$icon_status $txt_status\n$icon_source $txt_source\n$icon_update $txt_update"
}

#------------------------------------------------------------

zenity_main_menu() {

    # STATUS BUTTON TEXT
    local txt_button_status='Enable'
    if check_horst_enabled; then
        txt_button_status='Disable'
    fi

    # ZENITY
    local zenity_result=''
    if check_horst_enabled; then
        if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header)" --cancel-label='Exit' --ok-label='Ok' 'Update' "$txt_button_status" 'Settings')"; then
            exit 0
        fi
    else
        if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header)" --cancel-label='Exit' --ok-label='Ok' "$txt_button_status" 'Settings')"; then
            exit 0
        fi
    fi

    # ZENITY RESULT
    case "$zenity_result" in
    'Update')
        zenity_horst_update
        ;;
    "$txt_button_status")
        if check_horst_enabled; then
            # DISABLE HORST
            zenity_horst_disable
        else
            # ENABLE HORST
            zenity_horst_enable
        fi
        # Reload script
        main
        ;;
    'Settings')
        zenity_settings_menu
        ;;
    esac
}

#------------------------------------------------------------

zenity_settings_menu() {

    local zenity_result=''
    if check_horst_enabled; then
        if ! zenity_result="$(zenity --height=290 --list --hide-header --column="" --title="Settings" --text="$(print_zenity_header)" --cancel-label='Back' --ok-label='Ok' 'Edit Configuration' 'Generated /etc/hosts' 'Edit Source List' 'Edit White List' 'Edit Hosts')"; then
            main
            return 1
        fi
    else
        if ! zenity_result="$(zenity --height=180 --list --hide-header --column="" --title="Settings" --text="$(print_zenity_header)" --cancel-label='Back' --ok-label='Ok' 'Edit Configuration')"; then
            main
            return 1
        fi
    fi
    case "$zenity_result" in
    'Edit Configuration')
        if result=$(zenity --text-info --width=600 --height=400 --title="Configuration" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$SCRIPT_CONFIG"); then
            echo "$result" >"$SCRIPT_CONFIG"
            notify "Configuration saved"
            main
            return
        fi
        zenity_settings_menu
        ;;
    'Edit Source List')
        if result=$(zenity --text-info --width=800 --height=600 --title="Source List" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$SOURCE_FILE"); then
            echo "$result" >"$SOURCE_FILE"
            notify "Source List saved"
        fi
        zenity_settings_menu
        ;;
    'Edit White List')
        if result=$(zenity --text-info --width=600 --height=400 --title="White List" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$WHITE_LIST_FILE"); then
            echo "$result" >"$WHITE_LIST_FILE"
            notify "White List saved"
        fi
        zenity_settings_menu
        ;;
    "Edit Hosts")
        if result=$(zenity --text-info --width=600 --height=400 --title="Hosts" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$HOSTS_USER_FILE"); then
            echo "$result" >"$HOSTS_USER_FILE"
            notify "Hosts saved"
        fi
        zenity_settings_menu
        ;;
    "Generated /etc/hosts")
        zenity --text-info --width=800 --height=600 --title="$HOSTS_FILE" --ok-label="Close" --cancel-label="Back" --font="monospace" --filename="$HOSTS_FILE"
        zenity_settings_menu
        ;;

    esac
}

#------------------------------------------------------------

execute_white_list() {
    local root_password="$1"
    while read line; do
        if ! [ "$line" = "" ]; then
            # Remove line
            echo "$root_password" | sudo -S sed -i "/$line/d" "$HOSTS_FILE"
        fi
    done <"$WHITE_LIST_FILE"
    echo "$HOSTS_FILE cleared"
}

#------------------------------------------------------------

check_horst_enabled() {
    if [ -f "$HOSTS_FILE" ] && [ -f "$HOSTS_VERSION_FILE" ]; then
        return 0
    else
        return 1
    fi
}

#------------------------------------------------------------

zenity_horst_enable() {
    local root_password="$1"

    # ROOT PASSWORD
    if [ "$root_password" = "" ]; then
        if ! root_password="$(zenity --width=280 --height=120 --entry --hide-text --text="Root Password")"; then
            main
            return 1
        fi
    fi

    # CHECK ROOT PASSWORD
    if ! check_root_password "$root_password"; then
        main
        return 1
    else
        # CHECK CACHE
        if [ -f "$CACHE_DIR/hosts" ] && [ -f "$CACHE_DIR/version" ]; then

            # CREATE HOSTS BACKUP
            if [ -f "$HOSTS_FILE" ] && [ ! -f "$HOSTS_BACKUP_FILE" ]; then
                echo -e "$root_password\n" | sudo -S cp "$HOSTS_FILE" "$HOSTS_BACKUP_FILE" && echo "Backup created: $HOSTS_FILE -> $HOSTS_BACKUP_FILE"
            fi

            # CREATE FROM CACHE
            echo -e "$root_password\n" | sudo -S cp "$CACHE_DIR/hosts" "$HOSTS_FILE"
            cp "$CACHE_DIR/version" "$HOSTS_VERSION_FILE"

            # Clear Hosts
            execute_white_list "$root_password"

            echo "Enabled"
            notify "Enabled"
        else
            # UPDATE
            zenity_horst_update "$root_password"
        fi
    fi
}

#------------------------------------------------------------

zenity_horst_update() {
    local root_password="$1"

    # ROOT PASSWORD
    if [ "$root_password" = "" ]; then
        if ! root_password="$(zenity --width=280 --height=120 --entry --hide-text --text="Root Password")"; then
            main
            return 1
        fi
    fi

    # CHECK ROOT PASSWORD
    if ! check_root_password "$root_password"; then
        main
        return 1
    else
        # SUB PROCESS
        echo "$root_password" | sudo -S rm -Rf "$TEMP_DIR"
        echo "$root_password" | sudo -S rm -Rf "$CACHE_DIR"
        mkdir -p "$TEMP_DIR"
        mkdir -p "$CACHE_DIR"

        local state_file="$TEMP_DIR/state"
        (
            # CREATE HOST FILE
            if [ ! -f "$HOSTS_FILE" ]; then
                {
                    echo '127.0.0.1    localhost'
                    echo '::1          localhost'
                } >"/tmp/$SCRIPT_ID-hosts.tmp"

                echo -e "$root_password\n" | sudo -S mv "/tmp/$SCRIPT_ID-hosts.tmp" "$HOSTS_FILE"
                echo "Default $HOSTS_FILE created"
            fi

            # CREATE BACKUP
            if [ ! -f "$HOSTS_BACKUP_FILE" ]; then
                echo -e "$root_password\n" | sudo -S cp "$HOSTS_FILE" "$HOSTS_BACKUP_FILE" && echo "Backup created: $HOSTS_FILE -> $HOSTS_BACKUP_FILE"
            fi

            # CREATE USER HOSTS
            if [ ! -f "$HOSTS_USER_FILE" ]; then
                cp "$HOSTS_FILE" "$HOSTS_USER_FILE" && echo "User Hosts created: $HOSTS_FILE -> $HOSTS_USER_FILE"
            fi

            # TEMP
            local tmp_hosts="$TEMP_DIR/hosts"
            echo "$root_password" | sudo -S rm -f "$HOSTS_FILE"

            echo -e "# //////////////////////////////////////////////////////////" >>"$tmp_hosts"
            echo -e "# GENERATED BY HORST" >>"$tmp_hosts"
            echo -e "# GENERATED DATE: $TIMESTAMP" >>"$tmp_hosts"
            echo -e "# //////////////////////////////////////////////////////////" >>"$tmp_hosts"

            echo -e "\n# !!! DO NOT EDIT !!!\n" >>"$tmp_hosts"
            echo -e "# //////////////////////////////////////////////////////////" >>"$tmp_hosts"
            echo -e "# ORIGINAL HOSTS FILE" >>"$tmp_hosts"
            echo -e "# //////////////////////////////////////////////////////////" >>"$tmp_hosts"
            cat "$HOSTS_USER_FILE" >>"$tmp_hosts"

            local number_sources=$(count_sources)
            echo -e "\n# //////////////////////////////////////////////////////////" >>"$tmp_hosts"
            echo -e "# HORST AD BLOCKER ($number_sources SOURCES)" >>"$tmp_hosts"
            echo -e "# //////////////////////////////////////////////////////////" >>"$tmp_hosts"

            # DOWNLOAD HOSTS
            echo "DOWNLOAD HOSTS..."
            local source_counter=0
            while read line; do
                if ! [ "$line" = "" ]; then
                    source_counter=$((source_counter + 1))
                    echo "DOWNLOAD $source_counter. SOURCE: $line"
                    echo -e "\n### $source_counter. SOURCE\n### $line\n" >>"$tmp_hosts-online"
                    #curl -L https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts -o "$tmp_hosts-online"
                    curl -L "$line" >>"$tmp_hosts-online"
                fi
            done <"$SOURCE_FILE"
            cat "$tmp_hosts-online" >>"$tmp_hosts"

            # SET VERSION
            echo "$TIMESTAMP" >"$HOSTS_VERSION_FILE"

            # WRITE /ETC/HOSTS
            echo "$root_password" | sudo -S cp "$tmp_hosts" "$HOSTS_FILE"

            # WHITE LIST
            execute_white_list "$root_password"

            # SET CACHE
            cp "$HOSTS_FILE" "$CACHE_DIR/hosts"
            cp "$HOSTS_VERSION_FILE" "$CACHE_DIR/version"

            # SUCCESS
            echo "SUCCESS" >"$state_file"
            echo "$HOSTS_FILE updated"
        ) &

        # Capture pid and show progress dialog
        local task_pid="$!"
        echo "$task_pid" >"$state_file"
        tail -f /dev/null --pid $task_pid | (zenity --width=280 --height=120 --progress --cancel-label="Cancel" --text="<b>$SCRIPT_TITLE Update...</b>\n" --pulsate --auto-close || (kill_pid "$task_pid" && echo "CANCELED" >"$state_file"))

        local hosts_status_state=$(<"$state_file")
        rm -f "$state_file"

        if [ "$hosts_status_state" = "SUCCESS" ]; then
            notify "Update successful"
        fi

        if [ "$hosts_status_state" = "CANCELED" ]; then
            notify "Update canceled"
        fi

        # Clear
        root_password=""
        sudo -k
    fi

    # Go to menu
    main
}

#------------------------------------------------------------

zenity_horst_disable() {
    local root_password="$1"

    # ROOT PASSWORD
    if [ "$root_password" = "" ]; then
        if ! root_password="$(zenity --width=280 --height=120 --entry --hide-text --text="Root Password")"; then
            main
            return 1
        fi
    fi

    # CHECK ROOT PASSWORD
    if ! check_root_password "$root_password"; then
        main
        return 1
    else
        if [ -f "$HOSTS_BACKUP_FILE" ]; then
            echo "$root_password" | sudo -S mv -f "$HOSTS_BACKUP_FILE" "$HOSTS_FILE" && echo "$HOSTS_FILE reverted"
        else
            echo "$HOSTS_BACKUP_FILE not found"
            root_password=""
            sudo -k
            return 1
        fi

        if [ -f "$HOSTS_VERSION_FILE" ]; then
            rm "$HOSTS_VERSION_FILE" && echo "$HOSTS_VERSION_FILE removed"
        else
            echo "$HOSTS_VERSION_FILE not found"
            root_password=""
            sudo -k
            return 1
        fi

        # Clear
        root_password=""
        sudo -k

        notify "Disabled"
    fi
}

#------------------------------------------------------------

count_sources() {
    local source_counter=0
    while read line; do
        if ! [ "$line" = "" ]; then
            source_counter=$((source_counter + 1))
        fi
    done <"$SOURCE_FILE"
    echo "$source_counter"
}

#------------------------------------------------------------

kill_pid() {
    local pid_kill="$1"
    print_children_pid() {
        local children_pid
        children_pid="$(pgrep -P "$1")"
        for pid in $children_pid; do
            print_children_pid "$pid"
        done
        if [ "$children_pid" != "" ]; then
            printf "$children_pid "
        fi
    }
    local pid_array=()
    pid_array+=("$pid_kill")
    pid_array+=($(print_children_pid "$pid_kill"))
    for pid in ${pid_array[@]}; do
        kill -9 "$pid"
    done
}

#--------------------------------------------------------------

check_root_password() {
    if [ "$1" = "" ]; then
        notify "Root Password was empty"
        return 1
    fi
    if ! echo "$1" | sudo -S true; then
        notify "Root Password was wrong"
        return 1
    else
        log "Root password correct..."
        return 0
    fi
}

#------------------------------------------------------------

check_config() {
    local config_key="$1"
    local config_value="$2"
    mkdir -p "$SCRIPT_HOME" && touch "$SCRIPT_CONFIG"
    if ! grep -qrnw "$SCRIPT_CONFIG" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >>"$SCRIPT_CONFIG"
    fi
}

#--------------------------------------------------------------

create_desktop_file() {
    {
        echo "[Desktop Entry]"
        echo "Name=$SCRIPT_TITLE"
        echo "Icon=$SCRIPT_ICON"
        echo "Exec=$SCRIPT_FILE"
        echo "Type=Application"
    } >"$DESKTOP_FILE"
    chmod +x "$DESKTOP_FILE"
}

#--------------------------------------------------------------

remove_desktop_file() {
    rm -f "$DESKTOP_FILE"
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# ARGUMENTS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if [ "$1" = "--install" ]; then
    create_desktop_file
    exit 0
fi

if [ "$1" = "--remove" ]; then
    remove_desktop_file
    exit 0
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v /usr/bin/zenity)" ]; then
    notify-send "ERROR: zenity not installed"
    exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main "$@"
